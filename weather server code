import socket
import json
import requests

# OpenWeatherMap API key and endpoint
API_KEY = "6e98eb31fb7e89b073642220f3bd7f9c"  # Replace with your OpenWeatherMap API key
WEATHER_API_URL = "http://api.openweathermap.org/data/2.5/weather"

def fetch_weather_data(city_name):
    try:
        # Request weather data from OpenWeatherMap
        params = {
            'q': city_name,
            'appid': API_KEY,
            'units': 'metric'
        }
        response = requests.get(WEATHER_API_URL, params=params)
        if response.status_code == 200:
            data = response.json()

            # Extract required details
            weather_details = {
                "City": data['name'],
                "Temperature": f"{data['main']['temp']} Â°C",
                "Condition": data['weather'][0]['description'].title(),
                "Humidity": f"{data['main']['humidity']}%",
                "Pressure": f"{data['main']['pressure']} hPa",
                "Wind Speed": f"{data['wind']['speed']} m/s",
                "Sunrise": f"{convert_unix_to_time(data['sys']['sunrise'])}",
                "Sunset": f"{convert_unix_to_time(data['sys']['sunset'])}",
                "Air Quality": "N/A (Add an air quality API if required)"
            }
            return json.dumps(weather_details, indent=4)
        else:
            return json.dumps({"Error": "City not found or API error."}, indent=4)
    except Exception as e:
        return json.dumps({"Error": f"Server error: {e}"}, indent=4)

def convert_unix_to_time(unix_timestamp):
    from datetime import datetime
    return datetime.fromtimestamp(unix_timestamp).strftime('%H:%M:%S')

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('127.0.0.1', 65432))  # IP and port
    server_socket.listen(5)
    print("Server is listening on port 65432...")

    while True:
        client_socket, address = server_socket.accept()
        print(f"Connection from {address} has been established.")
        city_name = client_socket.recv(1024).decode()
        print(f"Received city name: {city_name}")

        weather_info = fetch_weather_data(city_name)
        client_socket.send(weather_info.encode())
        client_socket.close()

if __name__ == "__main__":
    start_server()
